buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

group = 'tfc'
version = '3.0.0.0-mixin_fix'

java {
    archivesBaseName = 'chiseled-me-1.12'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    accessTransformer = file('src/main/resources/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', 'dev.necauqua.mods.cm.launch.MixinTrigger'

            mods {
                qolbackport {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', 'dev.necauqua.mods.cm.launch.MixinTrigger'

            mods {
                qolbackport {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    // https://github.com/Meldexun/BlockOverlayFix/blob/51f576479db14e59480b92c832ed5d39ddb80519/build.gradle#L48-L53
    implementation('org.spongepowered:mixin:0.8.5') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

processResources {
    rename '(accesstransformer\\.cfg|mods\\.toml|coremods\\.json)', 'META-INF/$1'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes([
                "Specification-Title"     : "chiseled me",
                //"Specification-Vendor": "necauqua",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "qolbackport authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
        // https://github.com/Meldexun/BlockOverlayFix/blob/51f576479db14e59480b92c832ed5d39ddb80519/build.gradle#L64-L69
        attributes 'FMLAT': "accesstransformer.cfg"
        attributes 'MixinConfigs': 'chiseled-me.mixins.json'
        attributes 'FMLCorePlugin': 'dev.necauqua.mods.cm.launch.MixinTrigger'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes 'ForceLoadAsMod': 'true'
        attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
        attributes 'TweakOrder': '0'
    }
}

mixin {
    add sourceSets.main, 'chiseled-me.refmap.json'
    config 'chiseled-me.hack.mixins.json'
}

jar.finalizedBy('reobfJar')
